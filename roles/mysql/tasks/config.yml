---
 - name: check if datadir exists
   stat:
     path: "{{mysql_data_dir}}/data"
   register: dir_details

 - name: create mysql data dir
   file:
     path: "{{mysql_data_dir}}/data"
     state: directory
     owner: mysql
     group: mysql
   when: dir_details.stat.exists == false

 - name: check if data dir is empty
   find:
     paths: "{{mysql_data_dir}}/data"
   register: filesFound

 - name: create systemctl file
   template:
     src: "{{item.src}}"
     dest: "{{item.dest}}"
     owner: "{{item.owner}}"
     group: "{{item.group}}"
     force: no 
   with_items:
     - {src: ../templates/systemctl.j2, dest: "/lib/systemd/system/mysql{{port}}.service", owner: root, group: root}
     - {src: ../templates/myconfig.j2, dest: "{{mysql_data_dir}}/my.cnf" ,  owner: mysql, group: mysql}

 - name: init mysql
   shell: mysqld --defaults-file={{mysql_data_dir}}/my.cnf  --initialize-insecure  --user=mysql
   when:  filesFound.matched == 0
 
 - name: add mysql alais
   lineinfile:
     path: /etc/profile
     regexp: '^alias mysql{{port}}'
     line: 'alias mysql{{port}}="mysql -S {{mysql_data_dir}}/mysql.sock"'

 - name: start mysql service
   systemd:
     name: mysql{{port}}
     state: started
     enabled: yes
     daemon_reload: yes 

 - name: set mysql root password
   mysql_user:
     name: root
     password: "{{myrootpassw}}"
     login_unix_socket: "{{mysql_data_dir}}/mysql.sock"
     host: localhost
     login_user: root
     sql_log_bin: no
     state: present
   when:  filesFound.matched == 0

 - name: add mysql repl account
   mysql_user:
     name: "{{item.name}}"
     password: "{{item.password}}"
     priv: "{{item.priv}}"
     host: "%"
     state: present
     append_privs: yes
     sql_log_bin: no
     login_unix_socket: "{{mysql_data_dir}}/mysql.sock"
     login_user: root
     login_password: "{{myrootpassw}}"
   with_items:
     - {name: repl , password: "{{replpass}}" , priv: "*.*:REPLICATION SLAVE"}  
     - {name: orchestrator, password: "{{orchpass}}", priv: "*.*:SUPER"} 
     - {name: orchestrator, password: "{{orchpass}}", priv: "*.*:REPLICATION SLAVE"}
     - {name: orchestrator, password: "{{orchpass}}", priv: "*.*:PROCESS"} 
     - {name: orchestrator, password: "{{orchpass}}", priv: "*.*:RELOAD"}
     - {name: orchestrator, password: "{{orchpass}}", priv: "mysql.slave_master_info:SELECT"}
   when:  filesFound.matched == 0


 - name: setup replication
   mysql_replication:
     mode: "{{item.mode}}"
     login_user: root
     login_password: "{{myrootpassw}}"
     master_auto_position: yes
     login_unix_socket: "{{mysql_data_dir}}/mysql.sock"
     master_host: "{{master_host}}" 
     master_user: repl
     master_password: "{{replpass}}"
     master_port: "{{master_port}}" 
   when: repl_role == 'slave'
   with_items:
     - {mode: stopslave}
     - {mode: resetslaveall}
     - {mode: changemaster}
     - {mode: startslave }

 - name: set slave host read_only
   mysql_variables:
     login_unix_socket: "{{mysql_data_dir}}/mysql.sock"
     login_user: root
     login_password: "{{myrootpassw}}"
     variable: super_read_only
     value: 1
   when: repl_role == 'slave'



