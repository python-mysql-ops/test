---

    - name: add redis group
      group: 
        name: redis
        state: present

    - name: add redis user
      user:
        name: redis
        group: redis
        system: yes

    - name: check if data dir exists
      stat:
        path: "{{redis_data_dir}}"
      register: file_details
 
    - name: create data dir
      file:
        path: "{{redis_data_dir}}"
        state: directory
        owner: redis
        group: redis
      when: file_details.stat.exists == false

    - name: if data dir is empty
      find:
        paths: "{{redis_data_dir}}"
      register: filesFound

    - name: add redis config file
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        owner: "{{item.owner}}"
        group: "{{item.group}}"
        mode: "{{item.mode}}"
      with_items:
        - {src: ../templates/redis.j2, dest: "{{redis_data_dir}}/redis.conf", owner: redis, group: redis, mode: u=rw}
        - {src: ../templates/systectl.j2, dest: "/lib/systemd/system/redis_{{ redis_port}}.service", owner: root, group: root, mode: u=rw}
        - {src: ../templates/stop.j2, dest: "{{redis_data_dir}}/redis-shutdown", owner: redis, group: redis, mode: o+x}
      when: filesFound.matched == 0 
    
    - name: start redis service
      systemd:
        state: started
        name: "redis_{{redis_port}}"
        daemon_reload: yes
        enabled: yes

    - name: create redis cluster
      shell: |
              /usr/local/redis/bin/redis-cli -a {{redispass}}   --cluster create {{redis_cluster_addres}} --cluster-replicas {{replicat_fact}}  << EOF
              yes
              EOF
      run_once: true
      register: redis_clus
      changed_when: '"[OK] All 16384 slots covered" in redis_clus.stdout'
      when: filesFound.matched == 0
